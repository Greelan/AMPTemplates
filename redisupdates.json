[
    {
        "UpdateStageName": "Create Installation Directory",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}redis"
    },
    {
        "UpdateStageName": "Create Data Directory",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}data"
    },
    {
        "UpdateStageName": "Create Run Directory",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}run"
    },
    {
        "UpdateStageName": "Create Config File",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateFile",
        "UpdateSourceArgs": "{{$FullBaseDir}}redis.conf",
        "UpdateSourceData": "",
        "OverwriteExistingFiles": false,
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Install Redis",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"RedisRelease=\\\"{{RedisRelease}}\\\"; RedisVersion=\\\"{{RedisVersion}}\\\"; cd redis && if [[ -x redis/bin/redis-server ]]; then InstalledVersion=$(redis/bin/redis-server --version | sed \\\"s/Redis server v=\\([0-9][0-9]*\\.[0-9][0-9]*\\.[0-9][0-9]*\\).*/\\1/\\\"); else InstalledVersion=\\\"\\\"; fi; [[ -z \\\"$RedisVersion\\\" ]] && RedisVersion=$(wget -qO- \\\"https://endoflife.date/api/v1/products/redis/releases/$RedisRelease\\\" | jq -r \\\".result.latest.name\\\"); if [[ ! \\\"$RedisVersion\\\" =~ ^(8.2|8.0|7.4|7.0|6.2)\\.[0-9]+$ ]]; then echo \\\"Invalid Redis version format specified\\\" && exit 1; elif [[ \\\"$InstalledVersion\\\" == \\\"$RedisVersion\\\" ]]; then echo \\\"Redis v$RedisVersion already installed. Skipping\\\" && exit 0; else [[ -f redis.tar.gz ]] && rm -f redis.tar.gz >/dev/null 2>&1; mkdir -p build >/dev/null; cd build && rm -rf ./* >/dev/null 2>&1 && wget -qO redis.tar.gz https://github.com/redis/redis/archive/refs/tags/$RedisVersion.tar.gz || { echo \\\"Download failed from GitHub. This is a fault with GitHub, not AMP. Aborting\\\"; cd .. && rm -rf build >/dev/null 2>&1; exit 1; }; tar -xzf redis.tar.gz --strip-components=1 >/dev/null 2>&1 && rm -f redis.tar.gz >/dev/null 2>&1 && echo \\\"Redis v$RedisVersion downloaded\\\" && echo \\\"Building Redis from source. This will take a while\\\" && { [[ -d ../redis ]] && mv -f ../redis ../redis-bak >/dev/null 2>&1 || true; } && mkdir -p ../redis >/dev/null 2>&1 && { export BUILD_TLS=yes; export BUILD_WITH_MODULES=yes; export DISABLE_WERRORS=yes; make -j \\\"$(nproc)\\\" all >/dev/null && make PREFIX=\\\"{{$FullBaseDir}}redis\\\" install >/dev/null && rm -f ../redis.conf.dist ../redis-full.conf.dist >/dev/null 2>&1; [[ -f redis.conf ]] && \\cp -f redis.conf ../redis.conf.dist >/dev/null 2>&1; [[ -f redis-full.conf ]] && \\cp -f redis-full.conf ../redis-full.conf.dist >/dev/null 2>&1; cd .. && rm -rf build redis-bak >/dev/null 2>&1 && echo -e \\\"Done\\nDefault user created with secure password authentication\\nUse AMP's console to manage the server via the default user\\n\\\"; } || { cd .. && rm -rf build redis >/dev/null 2>&1 && { [[ -d redis-bak ]] && mv -f redis-bak redis >/dev/null 2>&1 || true; } && echo \\\"Building Redis failed. Aborting\\\"; exit 1; }; fi\"",
        "SkipOnFailure": false
    }
]