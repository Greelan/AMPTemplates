[
    {
        "UpdateStageName": "Create Installation Directory",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}mariadb"
    },
    {
        "UpdateStageName": "Create Data Directory",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}data"
    },
    {
        "UpdateStageName": "Create Log Directory",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}log/mariadb"
    },
    {
        "UpdateStageName": "Create Run Directory",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}run/mariadbd"
    },
    {
        "UpdateStageName": "MariaDB Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"ServerVersion=\\\"{{ServerVersion}}\\\"; CustomServerVersion=\\\"{{CustomServerVersion}}\\\"; cd mariadb && if [[ -z \\\"$ServerVersion\\\" ]]; then if [[ ! \\\"$CustomServerVersion\\\" =~ ^(10|11|12)\\.[0-9]+\\.[0-9]+$ ]]; then echo \\\"Invalid MariaDB version format specified\\\" && exit 1; else DownloadURL=http://downloads.mariadb.org/rest-api/mariadb/$CustomServerVersion/mariadb-$CustomServerVersion-linux-systemd-x86_64.tar.gz && OutputMessage=\\\"MariaDB v$CustomServerVersion downloaded\\\"; fi; else DownloadURL=$(wget -qO- \\\"https://downloads.mariadb.org/rest-api/mariadb/$ServerVersion/latest\\\" | jq -r \\\".releases[] | .files[] | select(.file_name | test(\\\\\\\"^mariadb-{{ServerVersion}}.[0-9]+-linux-systemd-x86_64.tar.gz$\\\\\\\")) | .file_download_url\\\") && OutputMessage=\\\"Latest MariaDB v$ServerVersion downloaded\\\"; fi; wget -qO mariadb.tar.gz $DownloadURL && find mariadb -mindepth 1 -path mariadb/lib/plugin -prune -o -exec rm -rf {} + >/dev/null 2>&1 && tar -xzf mariadb.tar.gz -C mariadb --strip-components=1 >/dev/null 2>&1 && rm -rf mariadb.tar.gz >/dev/null 2>&1 && echo \\\"$OutputMessage\\\"\"",
        "UpdateSourceConditionSetting": "DisableMariaDBDownload",
        "UpdateSourceConditionValue": "false",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "MariaDB Download",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"$ProgressPreference='SilentlyContinue'; $ServerVersion='{{ServerVersion}}'; $CustomServerVersion='{{CustomServerVersion}}'; if ( [string]::IsNullOrWhiteSpace($ServerVersion) ) { if ( $CustomServerVersion -notmatch '^(10|11|12)\\.[0-9]+\\.[0-9]+$' ) { Write-Output 'Invalid MariaDB version format specified'; exit 1 } else { $DownloadURL=\\\"http://downloads.mariadb.org/rest-api/mariadb/$CustomServerVersion/mariadb-$CustomServerVersion-winx64.zip\\\"; $OutputMessage=\\\"MariaDB v$CustomServerVersion downloaded\\\" } } else { $DownloadURL=(Invoke-RestMethod -Uri (\\\"https://downloads.mariadb.org/rest-api/mariadb/$ServerVersion/latest\\\") -UseBasicParsing).releases.PSObject.Properties.Value.files | Where-Object { $_.file_name -match '^mariadb-{{ServerVersion}}.*-winx64\\.zip$' } | Select-Object -First 1 -ExpandProperty file_download_url; $OutputMessage=\\\"Latest MariaDB v$ServerVersion downloaded\\\" }; Invoke-WebRequest -UseBasicParsing -Uri $DownloadURL -OutFile mariadb.zip; Write-Output $OutputMessage\"",
        "UpdateSourceConditionSetting": "DisableMariaDBDownload",
        "UpdateSourceConditionValue": "false",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "MariaDB Extract",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "ExtractArchive",
        "UpdateSourceData": "mariadb.zip",
        "UpdateSourceTarget": "{{$FullBaseDir}}",
        "OverwriteExistingFiles": true,
        "DeleteAfterExtract": true,
        "UpdateSourceConditionSetting": "DisableMariaDBDownload",
        "UpdateSourceConditionValue": "false",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "MariaDB Installation",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"Set-Location -Path 'mariadb'; $target = Join-Path (Get-Location) 'mariadb'; Get-ChildItem -Path $target -Recurse -Force | Where-Object { -not ($_.FullName -like '*\\lib\\plugin*') } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue; $source = Get-ChildItem -Directory -Filter 'mariadb-*' | Select-Object -First 1; if ($source) { robocopy $source.FullName $target /E /MOVE /NFL /NDL /NJH /NJS /NP > $null }\"",
        "UpdateSourceConditionSetting": "DisableMariaDBDownload",
        "UpdateSourceConditionValue": "false",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Initialize MariaDB",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"cd mariadb/mariadb && { [[ -f ../data/mysql/user.frm ]] || scripts/mariadb-install-db --no-defaults --port={{$ServerPort}} --basedir=./ --datadir=../data; }\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Initialize MariaDB",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"Set-Location -Path 'mariadb/mariadb'; if (Test-Path '../data/mysql/user.frm') { exit 0 } else { & bin/mariadb-install-db.exe --port={{$ServerPort}} --datadir=../data }\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Create my.cnf",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "CreateFile",
        "UpdateSourceData": "",
        "UpdateSourceArgs": "{{$FullBaseDir}}my.cnf",
        "OverwriteExistingFiles": false
    }
]