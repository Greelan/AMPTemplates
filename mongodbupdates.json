[
    {
        "UpdateStageName": "Create MongoDB Installation Directory",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}mongodb"
    },
    {
        "UpdateStageName": "Create MongoDB Shell Installation Directory",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}mongosh"
    },
    {
        "UpdateStageName": "Create Data Directory",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}data"
    },
    {
        "UpdateStageName": "Create Log Directory",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}log/mongodb"
    },
    {
        "UpdateStageName": "Create Run Directory",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}run"
    },
    {
        "UpdateStageName": "Download MongoDB",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"ServerVersion=\\\"{{ServerVersion}}\\\"; CustomServerVersion=\\\"{{CustomServerVersion}}\\\"; cd mongodb && if command -v mongodb/bin/mongod >/dev/null 2>&1; then InstalledVersion=$(mongodb/bin/mongod --version | grep \\\"^db version v\\\" | sed \\\"s/^db version v\\([0-9][0-9]*\\.[0-9][0-9]*\\.[0-9][0-9]*\\)/\\1/\\\"); else InstalledVersion=\\\"\\\"; fi; if [[ -z \\\"$ServerVersion\\\" ]]; then if [[ ! \\\"$CustomServerVersion\\\" =~ ^(7|8)\\.[0-9]+\\.[0-9]+$ ]]; then echo \\\"Invalid MongoDB version format specified\\\" && exit 1; elif [[ \\\"$InstalledVersion\\\" == \\\"$CustomServerVersion\\\" ]]; then echo \\\"MongoDB v$CustomServerVersion already installed. Skipping\\\" && exit 0; else MongoDBDownloadURL=https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian12-$CustomServerVersion.tgz && OutputMessage=\\\"MongoDB v$CustomServerVersion downloaded\\\"; fi; else LatestVersion=$(wget -qO- \\\"https://endoflife.date//api/v1/products/mongodb/releases/$ServerVersion\\\" | jq -r \\\".result.latest.name\\\") && if [[ \\\"$InstalledVersion\\\" == \\\"$LatestVersion\\\" ]]; then echo \\\"MongoDB v$LatestVersion already installed. Skipping\\\" && exit 0; else DownloadURL=https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian12-$LatestVersion.tgz && OutputMessage=\\\"MongoDB v$LatestVersion downloaded\\\"; fi; fi; [[ -f mongodb.tar.tgz ]] && rm -f mongodb.tar.tgz; wget -qO mongodb.tar.tgz $DownloadURL || { echo \\\"Download failed from the MongoDB CDN. This is a fault with the CDN, not AMP. Aborting\\\"; exit 1; }; tar -zxvf mongodb.tar.tgz -C mongodb --strip-components=1 >/dev/null 2>&1 && rm -f mongodb.tar.tgz >/dev/null 2>&1 && echo \\\"$OutputMessage\\\"\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Download MongoDB Shell",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"cd mongodb && if command -v mongosh/bin/mongosh >/dev/null 2>&1; then InstalledVersion=$(mongosh/bin/mongosh --version); else InstalledVersion=\\\"\\\"; fi; LatestVersion=$(wget -qO- \\\"https://api.github.com/repos/mongodb-js/mongosh/releases/latest\\\" | jq -r \\\".name\\\") && if [[ \\\"$InstalledVersion\\\" == \\\"$LatestVersion\\\" ]]; then echo \\\"MongoDB Shell v$LatestVersion already installed. Skipping\\\" && exit 0; else DownloadURL=https://downloads.mongodb.com/compass/mongosh-$LatestVersion-linux-x64-openssl3.tgz && OutputMessage=\\\"MongoDB Shell v$LatestVersion downloaded\\\"; fi; [[ -f mongosh.tar.tgz ]] && rm -f mongosh.tar.tgz; wget -qO mongosh.tar.tgz $DownloadURL || { echo \\\"Download failed from the MongoDB CDN. This is a fault with the CDN, not AMP. Aborting\\\"; exit 1; }; tar -zxvf mongosh.tar.tgz -C mongosh --strip-components=1 >/dev/null 2>&1 && rm -f mongosh.tar.tgz >/dev/null 2>&1 && echo \\\"$OutputMessage\\\"\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Set Up MongoDB",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"cd mongodb && export PATH=\\\"{{$FullBaseDir}}mongodb/bin:{{$FullBaseDir}}mongosh/bin:$PATH\\\"; if mongosh/bin/mongosh \\\"mongodb://%2FAMP%2Fmongodb%2Frun%2Fmongodb-{{$ServerPort}}.sock\\\" --quiet --eval \\\"try { db.runCommand({ ping: 1 }); quit(0); } catch(e) { quit(1); }\\\" >/dev/null 2>&1; then exit 0; fi; mongodb/bin/mongod --dbpath {{$FullBaseDir}}data --port {{$ServerPort}} --bind_ip {{$ApplicationIPBinding}} --unixSocketPrefix {{$FullBaseDir}}run --logpath {{$FullBaseDir}}log/mongodb/mongod.log --logappend --fork >/dev/null 2>&1; timeout=60; while ((timeout--)); do mongosh/bin/mongosh \\\"mongodb://%2FAMP%2Fmongodb%2Frun%2Fmongodb-{{$ServerPort}}.sock\\\" --quiet --eval \\\"try { db.runCommand({ ping: 1 }); quit(0); } catch(e) { if (e.codeName === \\\\\\\"Unauthorized\\\\\\\" || e.code === 13) quit(0); else quit(1); }\\\" >/dev/null 2>&1 && break || sleep 1; done; if ((timeout < 0)); then echo \\\"MongoDB server failed to start for setup. Aborting\\\"; exit 1; fi; mongosh/bin/mongosh \\\"mongodb://%2FAMP%2Fmongodb%2Frun%2Fmongodb-{{$ServerPort}}.sock\\\" --quiet --eval \\\"try { const adminDb = db.getSiblingDB(\\\\\\\"admin\\\\\\\"); if (!adminDb.getUser(\\\\\\\"admin\\\\\\\")) { adminDb.createUser({ user: \\\\\\\"admin\\\\\\\", pwd: \\\\\\\"{{AdminPassword}}\\\\\\\", roles: [\\\\\\\"root\\\\\\\"] }); print(\\\\\\\"Root user 'admin' created with secure password authentication\\\\\\\"); print(\\\\\\\"Use AMP's console to manage the server via the admin user\\\\\\\"); } } catch (e) { if (e.codeName === \\\\\\\"Unauthorized\\\\\\\" || e.code === 13) { } else { print(\\\\\\\"Failed to connect to MongoDB: \\\\\\\" + e); quit(1); } }\\\"; mongodb/bin/mongod --shutdown --dbpath {{$FullBaseDir}}data >/dev/null 2>&1\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Create mongod.conf",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateFile",
        "UpdateSourceData": "",
        "UpdateSourceArgs": "{{$FullBaseDir}}mongod.conf",
        "OverwriteExistingFiles": false
    }
]
