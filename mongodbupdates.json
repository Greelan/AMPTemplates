[
    {
        "UpdateStageName": "Create MongoDB Installation Directory",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}mongodb"
    },
    {
        "UpdateStageName": "Create MongoDB Shell Installation Directory",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}mongosh"
    },
    {
        "UpdateStageName": "Create Data Directory",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}data"
    },
    {
        "UpdateStageName": "Create Log Directory",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}log/mongodb"
    },
    {
        "UpdateStageName": "Create Run Directory",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}run"
    },
    {
        "UpdateStageName": "Download MongoDB",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"ServerVersion=\\\"{{ServerVersion}}\\\"; CustomServerVersion=\\\"{{CustomServerVersion}}\\\"; cd mongodb && if command -v mongodb/bin/mongod >/dev/null 2>&1; then InstalledVersion=$(mongodb/bin/mongod --version | grep \\\"^db version v\\\" | sed \\\"s/^db version v\\([0-9][0-9]*\\.[0-9][0-9]*\\.[0-9][0-9]*\\)/\\1/\\\"); else InstalledVersion=\\\"\\\"; fi; if [[ -z \\\"$ServerVersion\\\" ]]; then if [[ ! \\\"$CustomServerVersion\\\" =~ ^(7|8)\\.[0-9]+\\.[0-9]+$ ]]; then echo \\\"Invalid MongoDB version format specified\\\" && exit 1; elif [[ \\\"$InstalledVersion\\\" == \\\"$CustomServerVersion\\\" ]]; then echo \\\"MongoDB v$CustomServerVersion already installed. Skipping\\\" && exit 0; else MongoDBDownloadURL=https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian12-$CustomServerVersion.tgz && OutputMessage=\\\"MongoDB v$CustomServerVersion downloaded\\\"; fi; else LatestVersion=$(wget -qO- \\\"https://endoflife.date//api/v1/products/mongodb/releases/$ServerVersion\\\" | jq -r \\\".result.latest.name\\\") && if [[ \\\"$InstalledVersion\\\" == \\\"$LatestVersion\\\" ]]; then echo \\\"MongoDB v$LatestVersion already installed. Skipping\\\" && exit 0; else DownloadURL=https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian12-$LatestVersion.tgz && OutputMessage=\\\"MongoDB v$LatestVersion downloaded\\\"; fi; fi; [[ -f mongodb.tar.tgz ]] && rm -f mongodb.tar.tgz; wget -qO mongodb.tar.tgz $DownloadURL || { echo \\\"Download failed from the MongoDB CDN. This is a fault with the CDN, not AMP. Aborting\\\"; exit 1; }; tar -zxvf mongodb.tar.tgz -C mongodb --strip-components=1 >/dev/null 2>&1 && rm -f mongodb.tar.tgz >/dev/null 2>&1 && echo \\\"$OutputMessage\\\"\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Download MongoDB",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"$ProgressPreference='SilentlyContinue'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $ServerVersion='{{ServerVersion}}'; $CustomServerVersion='{{CustomServerVersion}}'; Set-Location -Path 'mongodb'; if (Test-Path 'mongodb/bin/mongod.exe') { (& mongodb/bin/mongod.exe --version)[0] -match 'db version v(\\d+\\.\\d+\\.\\d+)' >$null; $InstalledVersion = $matches[1] } else { $InstalledVersion = '' }; if ( [string]::IsNullOrWhiteSpace($ServerVersion) ) { if ( $CustomServerVersion -notmatch '^(6|7|8)\\.\\d+\\.\\d+$' ) { Write-Output 'Invalid MongoDB version format specified'; exit 1 } elseif ( $InstalledVersion -eq $CustomServerVersion ) { Write-Output \\\"MongoDB v$CustomServerVersion already installed. Skipping\\\"; exit 0 } else { $DownloadURL=\\\"https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-$CustomServerVersion.zip\\\"; $OutputMessage=\\\"MongoDB v$CustomServerVersion downloaded\\\" } } else { $LatestVersion = (Invoke-RestMethod -UseBasicParsing -Uri \\\"https://endoflife.date//api/v1/products/mongodb/releases/$ServerVersion\\\").result.latest.name; if ( $InstalledVersion -eq $LatestVersion ) { Write-Output \\\"MongoDB v$LatestVersion already installed. Skipping\\\"; exit 0 } else { $DownloadURL=\\\"https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-$LatestVersion.zip\\\"; $OutputMessage=\\\"MongoDB v$LatestVersion downloaded\\\" } }; if ( Test-Path mongodb.zip ) { Remove-Item mongodb.zip -Force -ErrorAction SilentlyContinue *> $null }; try { Invoke-WebRequest -UseBasicParsing -Uri $DownloadURL -OutFile mongodb.zip -ErrorAction Stop } catch { Write-Output \\\"Download failed from the MongoDB CDN. This is a fault with the CDN, not AMP. Aborting\\\"; exit 1; }; Expand-Archive -Path \\\"mongodb.zip\\\" -DestinationPath \\\".\\\" -Force *> $null; Remove-Item mongodb.zip -Force -ErrorAction SilentlyContinue *> $null; $source = Get-ChildItem -Directory -Filter 'mongodb-*' | Select-Object -First 1; if ($source) { robocopy $source.FullName 'mongodb' /E /MOVE /NFL /NDL /NJH /NJS /NP *> $null; if ($LASTEXITCODE -gt 7) { exit $LASTEXITCODE } };Write-Output $OutputMessage\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Download MongoDB Shell",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"cd mongodb && if command -v mongosh/bin/mongosh >/dev/null 2>&1; then InstalledVersion=$(mongosh/bin/mongosh --version); else InstalledVersion=\\\"\\\"; fi; LatestVersion=$(wget -qO- \\\"https://api.github.com/repos/mongodb-js/mongosh/releases/latest\\\" | jq -r \\\".name\\\") && if [[ \\\"$InstalledVersion\\\" == \\\"$LatestVersion\\\" ]]; then echo \\\"MongoDB Shell v$LatestVersion already installed. Skipping\\\" && exit 0; else DownloadURL=https://downloads.mongodb.com/compass/mongosh-$LatestVersion-linux-x64-openssl3.tgz && OutputMessage=\\\"MongoDB Shell v$LatestVersion downloaded\\\"; fi; [[ -f mongosh.tar.tgz ]] && rm -f mongosh.tar.tgz; wget -qO mongosh.tar.tgz $DownloadURL || { echo \\\"Download failed from the MongoDB CDN. This is a fault with the CDN, not AMP. Aborting\\\"; exit 1; }; tar -zxvf mongosh.tar.tgz -C mongosh --strip-components=1 >/dev/null 2>&1 && rm -f mongosh.tar.tgz >/dev/null 2>&1 && echo \\\"$OutputMessage\\\"\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Download MongoDB Shell",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"$ProgressPreference='SilentlyContinue'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Set-Location -Path 'mongodb'; if (Test-Path 'mongosh/bin/mongosh.exe') { $InstalledVersion = & mongosh/bin/mongosh.exe --version } else { $InstalledVersion = '' }; $LatestVersion = (Invoke-RestMethod -UseBasicParsing -Uri \\\"https://api.github.com/repos/mongodb-js/mongosh/releases/latest\\\").name; if ( $InstalledVersion -eq $LatestVersion ) { Write-Output \\\"MongoDB Shell v$LatestVersion already installed. Skipping\\\"; exit 0 } else { $DownloadURL=\\\"https://downloads.mongodb.com/compass/mongosh-$LatestVersion-win32-x64.zip\\\"; $OutputMessage=\\\"MongoDB Shell v$LatestVersion downloaded\\\" }; if ( Test-Path mongosh.zip ) { Remove-Item mongosh.zip -Force -ErrorAction SilentlyContinue *> $null }; try { Invoke-WebRequest -UseBasicParsing -Uri $DownloadURL -OutFile mongosh.zip -ErrorAction Stop } catch { Write-Output \\\"Download failed from the MongoDB CDN. This is a fault with the CDN, not AMP. Aborting\\\"; exit 1; }; Expand-Archive -Path \\\"mongosh.zip\\\" -DestinationPath \\\".\\\" -Force *> $null; Remove-Item mongosh.zip -Force -ErrorAction SilentlyContinue *> $null; $source = Get-ChildItem -Directory -Filter 'mongosh-*' | Select-Object -First 1; if ($source) { robocopy $source.FullName 'mongosh' /E /MOVE /NFL /NDL /NJH /NJS /NP *> $null; if ($LASTEXITCODE -gt 7) { exit $LASTEXITCODE } }; Write-Output $OutputMessage\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Set Up MongoDB",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"cd mongodb && export PATH=\\\"{{$FullBaseDir}}mongodb/bin:{{$FullBaseDir}}mongosh/bin:$PATH\\\"; mongosh/bin/mongosh --host 127.0.0.1 --port {{$ServerPort}} --quiet --eval \\\"db.runCommand({ ping: 1 })\\\" >/dev/null 2>&1 && exit 0; mongodb/bin/mongod --dbpath {{$FullBaseDir}}data --port {{$ServerPort}} --bind_ip 127.0.0.1 --unixSocketPrefix {{$FullBaseDir}}run --logpath {{$FullBaseDir}}log/mongodb/mongod.log --logappend --fork >/dev/null 2>&1; timeout=60; while ((timeout--)); do mongosh/bin/mongosh --host 127.0.0.1 --port {{$ServerPort}} --quiet --eval \\\"db.runCommand({ ping: 1 })\\\" >/dev/null 2>&1 && break || sleep 1; done; if ((timeout < 0)); then echo \\\"MongoDB server failed to start for setup. Aborting\\\"; exit 1; fi; mongosh/bin/mongosh \\\"mongodb://127.0.0.1:{{$ServerPort}}/admin\\\" --quiet --eval \\\"try { const adminDb = db.getSiblingDB(\\\\\\\"admin\\\\\\\"); if (!adminDb.getUser(\\\\\\\"admin\\\\\\\")) { adminDb.createUser({ user: \\\\\\\"admin\\\\\\\", pwd: \\\\\\\"{{AdminPassword}}\\\\\\\", roles: [\\\\\\\"root\\\\\\\"] }); print(\\\\\\\"Root user 'admin' created with secure password authentication\\\\\\\"); print(\\\\\\\"Use AMP's console to manage the server via the admin user\\\\\\\"); } try { if (db.getMongo().getDBNames().includes(\\\\\\\"test\\\\\\\")) { db.getSiblingDB(\\\\\\\"test\\\\\\\").dropDatabase(); void 0; } } catch (e) {}; } catch (e) { if (e.codeName === \\\\\\\"Unauthorized\\\\\\\" || e.code === 13) { } else { print(\\\\\\\"Failed to connect to MongoDB: \\\\\\\" + e); quit(1); } }\\\"; mongodb/bin/mongod --shutdown --dbpath {{$FullBaseDir}}data >/dev/null 2>&1\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Set Up MongoDB",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"Set-Location -Path 'mongodb'; $env:PATH = \\\"{{$FullBaseDir}}mongodb\\bin;{{$FullBaseDir}}mongosh\\bin;\\\" + $env:PATH; & mongosh/bin/mongosh.exe --host 127.0.0.1 --port {{$ServerPort}} --quiet --eval 'db.runCommand({ ping: 1 })' *> $null; if ($?) { exit 0 }; Start-Process \\\"mongodb/bin/mongod.exe\\\" -ArgumentList \\\"--dbpath\\\", \\\"{{$FullBaseDir}}data\\\", \\\"--port\\\", \\\"$ServerPort\\\", \\\"--bind_ip\\\", \\\"127.0.0.1\\\", \\\"--logpath\\\", \\\"{{$FullBaseDir}}log\\mongodb\\mongod.log\\\", \\\"--logappend\\\" -RedirectStandardOutput \\\"NUL\\\" -RedirectStandardError \\\"NUL\\\" -WindowStyle Hidden; for ($i=0; $i -lt 60; $i++) { & mongosh/bin/mongosh.exe --host 127.0.0.1 --port {{$ServerPort}} --quiet --eval 'db.runCommand({ ping: 1 })' *> $null; if ($?) { break }; Start-Sleep -Seconds 1 }; if ($i -eq 60) { Write-Output 'MongoDB server failed to start for setup. Aborting'; exit 1 }; & mongosh/bin/mongosh.exe \\\"mongodb://127.0.0.1:{{$ServerPort}}/admin\\\" --quiet --eval 'try { var adminDb = db.getSiblingDB(\\\"admin\\\"); if (!adminDb.getUser(\\\"admin\\\")) { adminDb.createUser({ user: \\\"admin\\\", pwd: \\\"{{AdminPassword}}\\\", roles: [\\\"root\\\"] }); print(\\\"Root user \\\\\\\"admin\\\\\\\" created with secure password authentication\\\"); print(\\\"Use the AMP console to manage the server via the admin user\\\") }; try { if (db.getMongo().getDBNames().includes(\\\"test\\\")) { db.getSiblingDB(\\\"test\\\").dropDatabase(); null } } catch (e) {} } catch (e) { if (e.codeName !== \\\"Unauthorized\\\" && e.code !== 13) { print(\\\"Failed to connect to MongoDB: \\\" + e); quit(1) } }'; & mongodb/bin/mongod.exe --shutdown --dbpath \\\"{{$FullBaseDir}}data\\\" *> $null\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Create mongod.conf",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "CreateFile",
        "UpdateSourceData": "",
        "UpdateSourceArgs": "{{$FullBaseDir}}mongod.conf",
        "OverwriteExistingFiles": false
    }
]
